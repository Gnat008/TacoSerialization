TS


TacoSerialization is a serialization I made (and integrated into TacoAPI). It has some similarities and differences to how serializes things (call .toString() on something like an ItemStack to see what I mean). But there are some differences as well.

Similarities
Like Bukkit, TacoSerialization uses JSON for its data format.
Many of the keys are similar
Differences
I can't possibly list all of the differences, but here are a few:


ItemStacks
ItemStack serializing is a bit different. Bukkit uses the format {NAME x AMOUNT} for simple items. Also, the name is equivalent of calling .name() on the Material of the ItemStack. This means that you cannot tell the data type of the ItemStack just from that string (i.e. the color of wool). Here's an example:
[syntax=java]ItemStack items = new ItemStack(35, 1, (short) 14); //Red wool
System.out.println(items.toString());

//Output: {WOOL x 1}[/syntax]
TacoSerialization does this differently. It gets the Material's id (slightly reducing overhead) as well as the data/damage value and amount. If you were to use the same ItemStack and serialize it with
[syntax=java]SingleItemSerialization.serializeItemAsString(items);[/syntax]
You would get[CODE]{"id":35,"data":14,"amount":1}[/CODE]

As the result. The above format is useful for SQL servers to store that data. If you want a more human readable version you can use
[syntax=java]SingleItemSerialization.serializeItemAsString(items, true);[/syntax]
This method adds indents, making it easier to read.


